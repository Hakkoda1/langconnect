name: Deploy to EKS

on:
  push:
    branches: [ main ]
  workflow_dispatch:  

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ github.event.repository.name }}-ecr-repo
  EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
  K8S_NAMESPACE: ${{ vars.K8S_NAMESPACE }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }}

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update kube config
        run: aws eks update-kubeconfig --name ${{ vars.EKS_CLUSTER_NAME }} --region ${{ vars.AWS_REGION }}

      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.K8S_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to EKS
        run: |
          sed "s|<IMAGE_URL>|${{ env.IMAGE }}|g" k8s/deployment.yaml | kubectl apply -n ${{ env.K8S_NAMESPACE }} -f -
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f k8s/service.yaml
          kubectl apply -n ${{ env.K8S_NAMESPACE }} -f k8s/env-secret.yaml || echo "env-secret.yaml not found"
          kubectl rollout status deployment/langconnect -n ${{ env.K8S_NAMESPACE }}

      - name: Wait for LoadBalancer IP
        id: wait-for-lb
        run: |
          echo "Waiting for LoadBalancer IP..."
          for i in {1..30}; do
            LB_HOST=$(kubectl get svc langconnect-service -n ${{ env.K8S_NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ ! -z "$LB_HOST" ]; then
              echo "LB_HOST=$LB_HOST" >> $GITHUB_OUTPUT
              break
            fi
            echo "Attempt $i: Still waiting..."
            sleep 10
          done

      - name: Deployment summary
        if: steps.wait-for-lb.outputs.LB_HOST != ''
        run: |
          echo "## ðŸš€ LangConnect Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** http://${{ steps.wait-for-lb.outputs.LB_HOST }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespace:** ${{ env.K8S_NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cluster:** ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY